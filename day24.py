#Today I am learning about dataclasses. Here initiallizer will be generated by dataclass only and __repr__ dunder method also. I recall about the dunder method, basically it is a method which returns a string when nothing is called or return from a class and you want something to get's return always there where a dunder method comes into picture. Along with that I learned about kv_only = True that's keyword then frozen attribute and about post_init_ which is used to do check and validation post init. Then id : str = field(init=False, default_factory=generate_id) #now by puting init = False, now it is not a part of initializer and search_string:str = field(init=False,repr=False) #with _ this now it's protected and with repr = False, it will not print when you try to print person, but it's still part of it
from dataclasses import dataclass,field
import random,string

def generate_ISBN_number():
    id = "".join(random.choices(string.digits,k=13))
    return id

@dataclass(kw_only=True)
class LibraryBook:
    title:str
    author:str
    ISBN:int = field(default_factory=generate_ISBN_number,init=False)
    publication_year:int

    def __post_init__(self):
            if not (1000<=self.publication_year<=9999):
                raise ValueError("Publication year must be of 4 digit")
            
            if len(self.ISBN)!=13 and not self.ISBN.isdigit():
                raise ValueError("ISBN must be a 13-digit number.")
    
    def show_book_info(self):
        print (
            f"Title: {self.title}\n"
            f"Author: {self.author}\n"
            f"ISBN: {self.ISBN}\n"
            f"Publication Year: {self.publication_year}"
        )

if __name__ == "__main__":
    book1 = LibraryBook(title="HC Verma part 1",author="HC",publication_year=2002)
    book1.show_book_info()




# from dataclasses import dataclass,field
# import random,string

# def generate_id():
#     id = "".join(random.choices(string.ascii_uppercase,k=12))
#     return id

# @dataclass(frozen=False,kw_only=True) #by default it's false, but with true now you can't assing outside the instance. 
# class Person:
#     name:str
#     address:str
#     active:bool = True #this way I can set the default value
#     email_address:list[str] = field(default_factory=list)
#     id : str = field(init=False, default_factory=generate_id) #now by puting init = False, now it is not a part of initializer
#     _search_string:str = field(init=False,repr=False) #with _ this now it's protected and with repr = False, it will not print when you try to print person, but it's still part of it
    
#     def __post_init__(self)->None:
#         self._search_string = f"{self.name} {self.address}"
    

# def main():
#     person = Person(name='Darshil',address='Vadodara, Gujarat',)
#     print(person)

# if __name__ == "__main__":
#     main()